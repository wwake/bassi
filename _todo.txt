* Improve error handling in interpreter
* Make running write to an output stream

* Handle interpreter.format() for arrays
* Enforce array types
* Use test helper for parse-based tests in InterpreterTests

* ON..GOTO
* FOR, NEXT
* GOSUB, RETURN

* Multiple statements on one line
* IF relation-expr THEN statements

* PRINT with multiple expressions
   25 PRINT "A" 4221    -- is legal - puts a space between them
* PRINT with ",":
  + tabs to column 1, 16, 31, ... up to 5 print zones, or next line
  + comma at eol means don't print newline
* PRINT with ";"
  + move to next multiple of 3 characters to start printing
  + semicolon at eol means don't print newline
  + numbers have a space before and after
  + No space between strings
  
* Track line # of error messages
* Column number of syntax errors
* Error sync by skipping forward to next line # (or end)

* DATA, READ, RESTORE
* STOP
* Format for printing floats - no trailing 0's after decimal point?
* What should ASC do if given an empty string?

Parameterized tests package?

BI-22-21: June 7, 2022
* String arrays
* Xcode - Jump to last destination keystroke (^B), refactoring keystrokes (ctrl-command-M / R / V)
* Simplify lexer

BI-22-20: June 6, 2022
* Bounds check 1-d arrays
* Multi-dimensional arrays

BI-22-19: June 3, 2022
* Parser: add support for multiple arguments on function call
* Expression: multi-argument pre-defined string functions
* DIM
* Expressions: subscripts
* What if array name not found?

BI-22-18: June 2, 2022
* Lexer: Add support for comma
* Interpreter: Stop when there's a syntax error
* testLEFTfunction

BI-22-17: June 1, 2022
* Use test helper in InterpreterTests
* Expressions: test pre-defined numeric functions
* Expression: single-argument pre-defined string functions

BI-22-16: May 31, 2022
* Type-check predefined function calls
* Move static type definitions from Lexer to `Type`
* In Parser, require() should consume token
* Type-check function results
* Error handling in interpreter
* Handling integer - line number vs float
* Check line number range (1..99999)


BI-22-15: May 30, 2022
* Make sure Dictionary works as expected (copy-on-write)
* DEF: user-defined functions
  + Interpret (save the value)
* On structs: https://forums.swift.org/t/why-are-structs-in-swift-said-to-be-immutable/55319
* Expressions: function calls
* DEF: user-defined functions
  + Interpret (save the value)
* Type-check user-defined functions

BI-22-14: May 27, 2022
* DEF: user-defined functions
  + Parse (done)
* Expressions: function calls of a couple predefined functions

BI-22-13: May 26, 2022
* Operate on Value rather than Float
* Print string expressions
* String expressions
  - relational operators
* PRINT with strings
* Spike a visitor pattern

BI-22-12: May 25, 2022
* Expression Types
* Enforced that assignment must have same type on left & right
* Enforced other operators' rules about floating point or matching types

BI-22-11: May 24, 2022
* Expressions: variables
  - Make PRINT more explicit about what's wrong
* Simple assignment ("LET")

BI-22-10: May 23, 2022
* END statement
* Run multi-line programs
* IF relation-expr THEN line-number

BI-22-09: May 20, 2022
* GOTO
* Make interpreter work one line at a time ("step()")
* Delete Parse.program if we work one line at a time
* Force line number to be parsed as an integer
  + "1 END" was interpreted as "1E" which is an invalid float

BI-22-08: May 19, 2022
* Precedence low to high: relational, NOT, AND, OR
* Add eol token to prevent - Program with plain PRINT will use line number of the next line eg
   20 PRINT
   30 PRINT 42
* Make parser check for end of line
    25 A = 42 21 "HI  -- error
    40 PRINT PRINT   -- error

BI-22-07: May 18, 2022
* Expressions with relational operators
* Exponentiation has higher precedence than unary minus
* Add all reserved words to lexer

BI-22-06: May 17, 2022
* REPL - LIST (sort line numbers numerically)
* REPL - RUN
* Unary "-"

BI-22-05: May 13, 2022
* Expressions with floating point - handle errors! (missing digits in exponent)
* Error message for bad factor
* Straighten out the types
* REPL - enter code

BI-22-04: May 12, 2022
* Expressions with single-character operators

BI-22-03: May 11, 2022
* Error handling w/try-catch
* PRINT with numbers
* Expressions with parentheses
* PRINT with expressions

BI-22-02: May 10, 2022
* Should Lexer be a Sequence? Yes, and IteratorProtocol too.
* Should Lexer work with [Character]? No, but we did clean up indexing.
* Run a REM-only program
* PRINT (no arguments)


BI-22-01: May 9, 2022
* Line Numbers
* Squeezing characters before lexing
* End of program ("Token.atEnd")
* REM


GRAMMAR:
program -> line*

line -> line-number statement "\n"

line-number -> INTEGER(INT)

statement -> "REM" .*
statement -> "PRINT" expression?
statement -> "GOTO" INTEGER(int)
statement -> "IF" expression THEN INTEGER(int)
statement -> [LET] VARIABLE ["(" expr {"," expr } ")"] = expression
statement -> DIM variable "(" INTEGER(INT) {"," INTEGER(INT)} ")"
expression -> orExpr

orExpr -> andExpr (OR andExpr)*

andExpr -> negation (AND negation)*

negation -> NOT negation
         -> relational

relational -> subexpr (relop subexpr)?

subexpr -> term (("+"|"-") term)*

term -> power (("*"|"/") power)*

power -> "-" power
power -> factor {"^" factor}

factor -> NUMBER(FLOAT)
factor -> "(" expression ")"
factor -> VARIABLE ["(" expression {"," expression} ")"]
factor -> STRING
factor -> PREDEFINED "(" expression {"," expression} ")"
factor -> FN LETTER ("(" expression ")")

Number => [0-9]+("."[0-9]+)?([Ee][+-]?[0-9]+)?

Variable => [A-Z]([0-9]?)($?)

Legal:
123
1234.5
1233E2
123.34e-14

Not legal:
123.
123.E3
123E
123.4E



Semantics:
* Arithmetic operators (+, -, *, /, ^) convert their arguments to "Float"
* Logical operators convert their arguments to "Short" - error if out of range
??? Does it truncate or round?
* Relationals convert numeric values to Float
* Strings can only work with relational operators
* Relationals can work with two numbers or two strings, but not mixed


10 PRINT "foo", 42.375, 10 + 2


REPL
LIST
RUN
enter code
SAVE
LOAD
NEW


type ->
  integer   (line numbers)
  number aka float
  string
  array [limit] of type
