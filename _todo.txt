* Expressions with single-character operators
* Straighten out the types
* REPL
* Unary "-"
* Expressions with multi-character operators
* Expressions with floating point
* PRINT with expressions
* PRINT with strings
* PRINT with ","
* PRINT with ";"
* Simple assignment ("LET")
* GOTO
* IF
* Track line # of error messages
* Error sync by skipping forward to next line # (or end)


Parameterized tests package?

BI-22-03: May 11, 2022
* Error handling w/try-catch
* PRINT with numbers
* Expressions with parentheses

BI-22-02: May 10, 2022
* Should Lexer be a Sequence? Yes, and IteratorProtocol too.
* Should Lexer work with [Character]? No, but we did clean up indexing.
* Run a REM-only program
* PRINT (no arguments)


BI-22-01: May 9, 2022
* Line Numbers
* Squeezing characters before lexing
* End of program ("Token.atEnd")
* REM


GRAMMAR:
program -> line*

line -> line-number statement "\n"

line-number -> INTEGER(INT)

statement -> "REM" .*
statement -> "PRINT" expression?

expression -> subexpr (relop subexpr)?

subexpr -> term (("+"|"-") term)*

term -> power (("*"|"/") power)*

power -> factor ("^" factor)*

factor -> INTEGER(INT)
factor -> "(" expression ")"

1+2+3
(1+2) + 3
1+(2+3)

      +
   +    3
  1 2


    +
   1  +
     2 3

Semantics:
* Arithmetic operators (+, -, *, /, ^) convert their arguments to "Float"
* Logical operators convert their arguments to "Short" - error if out of range
??? Does it truncate or round?
* Relationals convert numeric values to Float
* Strings can only work with relational operators
* Relationals can work with two numbers or two strings, but not mixed
